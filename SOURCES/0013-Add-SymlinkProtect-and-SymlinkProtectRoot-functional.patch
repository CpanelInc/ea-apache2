From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cory McIntire <cory@cpanel.net>
Date: Thu, 12 Jul 2018 15:50:51 -0500
Subject: [PATCH 13/20] Add SymlinkProtect and SymlinkProtectRoot functionality

---
 include/http_core.h           |  10 +++-
 modules/mappers/mod_userdir.c |  31 +++++++---
 server/core.c                 | 103 ++++++++++++++++++++++++++++++++++
 server/core.c.orig            |  85 ++++++++++++++++++----------
 4 files changed, 190 insertions(+), 39 deletions(-)

diff --git a/include/http_core.h b/include/http_core.h
index 9fb9f51..4d756d3 100644
--- a/include/http_core.h
+++ b/include/http_core.h
@@ -509,7 +509,7 @@ typedef unsigned long etag_components_t;
 #define AP_CORE_MERGE_FLAG(field, to, base, over) to->field = \
                over->field != AP_CORE_CONFIG_UNSET            \
                ? over->field                                  \
-               : base->field                                   
+               : base->field
 
 /**
  * @brief Server Signature Enumeration
@@ -672,7 +672,7 @@ typedef struct {
 #define AP_CGI_PASS_AUTH_UNSET   (2)
     /** CGIPassAuth: Whether HTTP authorization headers will be passed to
      * scripts as CGI variables; affects all modules calling
-     * ap_add_common_vars(), as well as any others using this field as 
+     * ap_add_common_vars(), as well as any others using this field as
      * advice
      */
     unsigned int cgi_pass_auth : 2;
@@ -752,6 +752,12 @@ typedef struct {
 #define AP_HTTP_METHODS_REGISTERED    2
     char http_methods;
     unsigned int merge_slashes;
+    /* symlink protection */
+#define AP_SYMLINK_PROTECT_UNSET   0
+#define AP_SYMLINK_PROTECT_ENABLE  1
+#define AP_SYMLINK_PROTECT_DISABLE 2
+    int symlink_protect;
+    const char *symlink_protect_root;
  
     apr_size_t   flush_max_threshold;
     apr_int32_t  flush_max_pipelined;
diff --git a/modules/mappers/mod_userdir.c b/modules/mappers/mod_userdir.c
index 1ec0e90..6a0f44d 100644
--- a/modules/mappers/mod_userdir.c
+++ b/modules/mappers/mod_userdir.c
@@ -51,6 +51,7 @@
 
 #include "apr_strings.h"
 #include "apr_user.h"
+#include "apr_env.h"
 
 #define APR_WANT_STRFUNC
 #include "apr_want.h"
@@ -62,7 +63,9 @@
 #include "ap_config.h"
 #include "httpd.h"
 #include "http_config.h"
+#include "http_core.h"
 #include "http_request.h"
+#include "http_log.h"
 
 #if !defined(WIN32) && !defined(OS2) && !defined(NETWARE)
 #define HAVE_UNIX_SUEXEC
@@ -203,6 +206,7 @@ static int translate_userdir(request_rec *r)
     const char *user, *dname;
     char *redirect;
     apr_finfo_t statbuf;
+    core_server_config *sconf;
 
     /*
      * If the URI doesn't match our basic pattern, we've nothing to do with
@@ -259,6 +263,8 @@ static int translate_userdir(request_rec *r)
      * Special cases all checked, onward to normal substitution processing.
      */
 
+    sconf = ap_get_core_module_config(server_conf);
+
     while (*userdirs) {
         const char *userdir = ap_getword_conf(r->pool, &userdirs);
         char *filename = NULL, *prefix = NULL;
@@ -313,18 +319,20 @@ static int translate_userdir(request_rec *r)
         }
 
         /*
-         * Now see if it exists, or we're at the last entry. If we are at the
-         * last entry, then use the filename generated (if there is one)
-         * anyway, in the hope that some handler might handle it. This can be
-         * used, for example, to run a CGI script for the user.
-         */
+        * Now see if it exists, or we're at the last entry. If we are at the
+        * last entry, then use the filename generated (if there is one)
+        * anyway, in the hope that some handler might handle it. This can be
+        * used, for example, to run a CGI script for the user.
+        */
         if (filename && (!*userdirs
-                      || ((rv = apr_stat(&statbuf, filename, APR_FINFO_MIN,
+                      || ((rv = apr_stat(&statbuf, filename, (
+                           sconf->symlink_protect == AP_SYMLINK_PROTECT_ENABLE) ?
+                               APR_FINFO_NORM :
+                               APR_FINFO_MIN,
                                          r->pool)) == APR_SUCCESS
                                              || rv == APR_INCOMPLETE))) {
             r->filename = apr_pstrcat(r->pool, filename, dname, NULL);
-            ap_set_context_info(r, apr_pstrmemdup(r->pool, r->uri,
-                                                  dname - r->uri),
+            ap_set_context_info(r, apr_pstrmemdup(r->pool, r->uri, dname - r->uri),
                                 filename);
             /* XXX: Does this walk us around FollowSymLink rules?
              * When statbuf contains info on r->filename we can save a syscall
@@ -333,6 +341,13 @@ static int translate_userdir(request_rec *r)
             if (*userdirs && dname[0] == 0)
                 r->finfo = statbuf;
 
+            /* This is used later on to make sure the symlink exploit is not
+             * exploitable.
+             */
+            if (sconf->symlink_protect == AP_SYMLINK_PROTECT_ENABLE) {
+                apr_table_set(r->subprocess_env, "SPT_DOCROOT", filename);
+            }
+
             /* For use in the get_suexec_identity phase */
             apr_table_setn(r->notes, "mod_userdir_user", user);
 
diff --git a/server/core.c b/server/core.c
index 7075bf5..f2fa940 100644
--- a/server/core.c
+++ b/server/core.c
@@ -21,6 +21,8 @@
 #include "apr_hash.h"
 #include "apr_thread_proc.h"    /* for RLIMIT stuff */
 #include "apr_random.h"
+#include "apr_env.h"
+#include "apr_file_io.h"
 
 #include "apr_version.h"
 #if APR_MAJOR_VERSION < 2
@@ -480,6 +482,7 @@ static void *create_core_server_config(apr_pool_t *a, server_rec *s)
 
     if (!is_virtual) {
         conf->ap_document_root = DOCUMENT_LOCATION;
+        conf->symlink_protect_root = "/var/www/html";
         conf->access_name = DEFAULT_ACCESS_FNAME;
 
         /* A mapping only makes sense in the global context */
@@ -544,6 +547,9 @@ static void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)
     if (virt->ap_document_root)
         conf->ap_document_root = virt->ap_document_root;
 
+    if (virt->symlink_protect_root)
+        conf->symlink_protect_root = virt->symlink_protect_root;
+
     if (virt->access_name)
         conf->access_name = virt->access_name;
 
@@ -590,6 +596,10 @@ static void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)
                            ? virt->merge_trailers
                            : base->merge_trailers;
 
+    conf->symlink_protect = (virt->symlink_protect != AP_SYMLINK_PROTECT_UNSET)
+                            ? virt->symlink_protect
+                            : base->symlink_protect;
+
     conf->protocols = ((virt->protocols->nelts > 0)?
                        virt->protocols : base->protocols);
     conf->protocols_honor_order = ((virt->protocols_honor_order < 0)?
@@ -4431,6 +4441,30 @@ static const char *set_merge_trailers(cmd_parms *cmd, void *dummy, int arg)
     return NULL;
 }
 
+static const char *set_symlink_protect(cmd_parms *cmd, void *dummy, int arg)
+{
+    core_server_config *conf = ap_get_module_config(cmd->server->module_config,
+                                                    &core_module);
+    conf->symlink_protect = (arg ? AP_SYMLINK_PROTECT_ENABLE :
+                             AP_SYMLINK_PROTECT_DISABLE);
+    return NULL;
+}
+
+static const char *set_symlink_protect_root(cmd_parms *cmd, void *dummy,
+                                     const char *arg)
+{
+    char* value;
+    core_server_config *conf = ap_get_module_config(cmd->server->module_config,
+                                                    &core_module);
+    if (arg == NULL) {
+        return "SymlinkProtectRoot must have a value";
+    }
+    value = apr_pstrdup(cmd->pool, arg);
+    conf->symlink_protect_root = value;
+
+    return NULL;
+}
+
 #ifdef WIN32
 static const char *set_unc_list(cmd_parms *cmd, void *d_, int argc, char *const argv[])
 {
@@ -4731,6 +4765,10 @@ AP_INIT_TAKE1("ThreadStackSize", ap_mpm_set_thread_stacksize, NULL, RSRC_CONF,
 AP_INIT_TAKE1("EnableExceptionHook", ap_mpm_set_exception_hook, NULL, RSRC_CONF,
               "Controls whether exception hook may be called after a crash"),
 #endif
+AP_INIT_FLAG("SymlinkProtect", set_symlink_protect, NULL, RSRC_CONF,
+             "Controls whether symlink protection will be active or not"),
+AP_INIT_TAKE1("SymlinkProtectRoot", set_symlink_protect_root, NULL, RSRC_CONF,
+             "Root directory of the symlink protect algorithm"),
 AP_INIT_TAKE1("TraceEnable", set_trace_enable, NULL, RSRC_CONF,
               "'on' (default), 'off' or 'extended' to trace request body content"),
 AP_INIT_FLAG("MergeTrailers", set_merge_trailers, NULL, RSRC_CONF,
@@ -4896,6 +4934,9 @@ static int default_handler(request_rec *r)
     int errstatus;
     apr_file_t *fd = NULL;
     apr_status_t status;
+    core_server_config *csconf;
+    apr_finfo_t post_open_dirstat;
+    apr_finfo_t post_open_finfo;
     /* XXX if/when somebody writes a content-md5 filter we either need to
      *     remove this support or coordinate when to use the filter vs.
      *     when to use this code
@@ -4906,6 +4947,13 @@ static int default_handler(request_rec *r)
     int bld_content_md5;
 
     d = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);
+
+    /* must fetch global configuration.  First to determine if we are
+     * going to apply symlink protection, and second to check the document
+     * root user against the open file user if using symlink protection.
+     */
+    csconf = ap_get_module_config(r->server->module_config, &core_module);
+
     bld_content_md5 = (d->content_md5 == AP_CONTENT_MD5_ON)
                       && r->output_filters->frec->ftype != AP_FTYPE_RESOURCE;
 
@@ -4979,6 +5027,61 @@ static int default_handler(request_rec *r)
             return HTTP_FORBIDDEN;
         }
 
+        if (csconf->symlink_protect == AP_SYMLINK_PROTECT_ENABLE) {
+            /* This is where the magic is. If a user is trying to hit the apache
+             * symlink race condition, then we will know about it here.
+             */
+
+            const char *sp_docroot = apr_table_get(r->subprocess_env, "SPT_DOCROOT");
+            apr_status_t post_dirstat_rv;
+            apr_status_t post_fdstat_rv;
+
+            if (strcmp(csconf->ap_document_root, csconf->symlink_protect_root) == 0
+                && sp_docroot != NULL) {
+                /* This request is from mod_userdir. We need to stat what was stored in SPT_DOCROOT. */
+                post_dirstat_rv = apr_stat(&post_open_dirstat, sp_docroot,
+                                           APR_FINFO_USER | APR_FINFO_LINK, r->pool);
+            }
+            else {
+                /* This request matched a vhost. We need to stat ap_document_root. */
+                post_dirstat_rv = apr_stat(&post_open_dirstat, csconf->ap_document_root,
+                                           APR_FINFO_USER | APR_FINFO_LINK, r->pool);
+            }
+
+            post_fdstat_rv = apr_stat_fd(&post_open_finfo, fd, APR_FINFO_USER, r->pool);
+
+            if (((post_dirstat_rv != APR_SUCCESS && post_dirstat_rv != APR_INCOMPLETE)
+                || !(post_open_dirstat.valid & APR_FINFO_USER))
+                || ((post_fdstat_rv != APR_SUCCESS && post_fdstat_rv != APR_INCOMPLETE)
+                || !(post_open_finfo.valid & APR_FINFO_USER))) {
+                /* Then we couldn't stat either the directory root of the vhost
+                 * (very unlikely) or we couldn't stat the open file descriptor
+                 * (probably impossible).
+                 */
+                ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r,
+                    "Could not stat directory root or open file. Aborting request.");
+                apr_file_close(fd);
+                return HTTP_NOT_FOUND;
+            }
+
+
+            if (apr_uid_compare(r->finfo.user, post_open_dirstat.user)
+                != APR_SUCCESS || apr_uid_compare(post_open_finfo.user, r->finfo.user)
+                != APR_SUCCESS) {
+                /* Then we've caught a race condition abuser. */
+                ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r,
+                    "Caught race condition abuser. attacker: %i, victim: %i"
+                    " open file owner: %i, open file: %s", post_open_dirstat.user, r->finfo.user,
+                    post_open_finfo.user, r->filename);
+
+                apr_file_close(fd);
+                /* Return 404 because we don't want an attacker to be able to test
+                 * what files are where based on the return of an error.
+                 */
+                return HTTP_NOT_FOUND;
+            }
+        }
+
         ap_update_mtime(r, r->finfo.mtime);
         ap_set_last_modified(r);
         ap_set_etag_fd(r, fd);
diff --git a/server/core.c.orig b/server/core.c.orig
index 3b50100..7075bf5 100644
--- a/server/core.c.orig
+++ b/server/core.c.orig
@@ -65,6 +65,11 @@
 #include <unistd.h>
 #endif
 
+#ifdef HAVE_SELINUX
+#include <selinux/selinux.h>
+#endif
+
+
 /* LimitRequestBody handling */
 #define AP_LIMIT_REQ_BODY_UNSET         ((apr_off_t) -1)
 #define AP_DEFAULT_LIMIT_REQ_BODY       ((apr_off_t) 1<<30) /* 1GB */
@@ -213,7 +218,7 @@ static void *create_core_dir_config(apr_pool_t *a, char *dir)
     conf->max_reversals = AP_MAXRANGES_UNSET;
 
     conf->cgi_pass_auth = AP_CGI_PASS_AUTH_UNSET;
-    conf->qualify_redirect_url = AP_CORE_CONFIG_UNSET; 
+    conf->qualify_redirect_url = AP_CORE_CONFIG_UNSET;
 
     return (void *)conf;
 }
@@ -411,7 +416,7 @@ static void *merge_core_dir_configs(apr_pool_t *a, void *basev, void *newv)
     if (new->enable_sendfile != ENABLE_SENDFILE_UNSET) {
         conf->enable_sendfile = new->enable_sendfile;
     }
- 
+
     if (new->read_buf_size) {
         conf->read_buf_size = new->read_buf_size;
     }
@@ -522,9 +527,9 @@ static void *create_core_server_config(apr_pool_t *a, server_rec *s)
 
     conf->protocols = apr_array_make(a, 5, sizeof(const char *));
     conf->protocols_honor_order = -1;
-    conf->merge_slashes = AP_CORE_CONFIG_UNSET; 
-    
-    conf->strict_host_check= AP_CORE_CONFIG_UNSET; 
+    conf->merge_slashes = AP_CORE_CONFIG_UNSET;
+
+    conf->strict_host_check= AP_CORE_CONFIG_UNSET;
 
     return (void *)conf;
 }
@@ -585,13 +590,13 @@ static void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)
                            ? virt->merge_trailers
                            : base->merge_trailers;
 
-    conf->protocols = ((virt->protocols->nelts > 0)? 
+    conf->protocols = ((virt->protocols->nelts > 0)?
                        virt->protocols : base->protocols);
     conf->protocols_honor_order = ((virt->protocols_honor_order < 0)?
                                        base->protocols_honor_order :
                                        virt->protocols_honor_order);
     AP_CORE_MERGE_FLAG(merge_slashes, conf, base, virt);
-    
+
 
     conf->flush_max_threshold = (virt->flush_max_threshold)
                                   ? virt->flush_max_threshold
@@ -601,7 +606,7 @@ static void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)
                                   : base->flush_max_pipelined;
 
     conf->strict_host_check = (virt->strict_host_check != AP_CORE_CONFIG_UNSET)
-                              ? virt->strict_host_check 
+                              ? virt->strict_host_check
                               : base->strict_host_check;
 
     AP_CORE_MERGE_FLAG(strict_host_check, conf, base, virt);
@@ -1637,7 +1642,7 @@ static const char *set_document_root(cmd_parms *cmd, void *dummy,
             conf->ap_document_root = arg;
         }
         else {
-            return apr_psprintf(cmd->pool, 
+            return apr_psprintf(cmd->pool,
                                 "DocumentRoot '%s' is not a directory, or is not readable",
                                 arg);
         }
@@ -4082,7 +4087,7 @@ static const char *set_protocols(cmd_parms *cmd, void *dummy,
     if (err) {
         return err;
     }
-    
+
     np = (const char **)apr_array_push(conf->protocols);
     *np = arg;
 
@@ -4095,11 +4100,11 @@ static const char *set_protocols_honor_order(cmd_parms *cmd, void *dummy,
     core_server_config *conf =
     ap_get_core_module_config(cmd->server->module_config);
     const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);
-    
+
     if (err) {
         return err;
     }
-    
+
     if (ap_cstr_casecmp(arg, "on") == 0) {
         conf->protocols_honor_order = 1;
     }
@@ -4109,7 +4114,7 @@ static const char *set_protocols_honor_order(cmd_parms *cmd, void *dummy,
     else {
         return "ProtocolsHonorOrder must be 'on' or 'off'";
     }
-    
+
     return NULL;
 }
 
@@ -4676,8 +4681,8 @@ AP_INIT_TAKE2("CGIVar", set_cgi_var, NULL, OR_FILEINFO,
 AP_INIT_FLAG("QualifyRedirectURL", set_qualify_redirect_url, NULL, OR_FILEINFO,
              "Controls whether the REDIRECT_URL environment variable is fully "
              "qualified"),
-AP_INIT_FLAG("StrictHostCheck", set_core_server_flag, 
-             (void *)APR_OFFSETOF(core_server_config, strict_host_check),  
+AP_INIT_FLAG("StrictHostCheck", set_core_server_flag,
+             (void *)APR_OFFSETOF(core_server_config, strict_host_check),
              RSRC_CONF,
              "Controls whether a hostname match is required"),
 AP_INIT_TAKE1("ForceType", ap_set_string_slot_lower,
@@ -4741,8 +4746,8 @@ AP_INIT_ITERATE("HttpProtocolOptions", set_http_protocol_options, NULL, RSRC_CON
                 "'Unsafe' or 'Strict' (default). Sets HTTP acceptance rules"),
 AP_INIT_ITERATE("RegisterHttpMethod", set_http_method, NULL, RSRC_CONF,
                 "Registers non-standard HTTP methods"),
-AP_INIT_FLAG("MergeSlashes", set_core_server_flag, 
-             (void *)APR_OFFSETOF(core_server_config, merge_slashes),  
+AP_INIT_FLAG("MergeSlashes", set_core_server_flag,
+             (void *)APR_OFFSETOF(core_server_config, merge_slashes),
              RSRC_CONF,
              "Controls whether consecutive slashes in the URI path are merged"),
 { NULL }
@@ -4837,7 +4842,7 @@ static int core_override_type(request_rec *r)
     if (conf->mime_type && strcmp(conf->mime_type, "none"))
         ap_set_content_type_ex(r, (char*) conf->mime_type, 1);
 
-    if (conf->expr_handler) { 
+    if (conf->expr_handler) {
         const char *err;
         const char *val;
         val = ap_expr_str_exec(r, conf->expr_handler, &err);
@@ -4847,18 +4852,18 @@ static int core_override_type(request_rec *r)
             return HTTP_INTERNAL_SERVER_ERROR;
         }
 
-        if (val != ap_strstr_c(val, "proxy:unix")) { 
+        if (val != ap_strstr_c(val, "proxy:unix")) {
             /* Retained for compatibility --  but not for UDS */
             char *tmp = apr_pstrdup(r->pool, val);
             ap_str_tolower(tmp);
             val = tmp;
         }
 
-        if (strcmp(val, "none")) { 
+        if (strcmp(val, "none")) {
             r->handler = val;
         }
     }
-    else if (conf->handler && strcmp(conf->handler, "none")) { 
+    else if (conf->handler && strcmp(conf->handler, "none")) {
         r->handler = conf->handler;
     }
 
@@ -5162,7 +5167,29 @@ static int core_post_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *pte
     }
 #endif
 
-    return OK;
+#ifdef HAVE_SELINUX
+    {
+        static int already_warned = 0;
+        int is_enabled = is_selinux_enabled() > 0;
+
+        if (is_enabled && !already_warned) {
+            security_context_t con;
+
+            if (getcon(&con) == 0) {
+
+                ap_log_error(APLOG_MARK, APLOG_NOTICE, 0, NULL,
+                             "SELinux policy enabled; "
+                             "httpd running as context %s", con);
+
+                already_warned = 1;
+
+                freecon(con);
+            }
+        }
+    }
+#endif
+
+	return OK;
 }
 
 static void core_insert_filter(request_rec *r)
@@ -5327,7 +5354,7 @@ static int core_pre_connection(conn_rec *c, void *csd)
     if (c->master) {
         return DONE;
     }
-    
+
     net = apr_palloc(c->pool, sizeof(*net));
     /* The Nagle algorithm says that we should delay sending partial
      * packets in hopes of getting more data.  We don't want to do
@@ -5532,7 +5559,7 @@ static apr_status_t core_insert_network_bucket(conn_rec *c,
 }
 
 static apr_status_t core_dirwalk_stat(apr_finfo_t *finfo, request_rec *r,
-                                      apr_int32_t wanted) 
+                                      apr_int32_t wanted)
 {
     return apr_stat(finfo, r->filename, wanted, r->pool);
 }
@@ -5588,21 +5615,21 @@ static int core_upgrade_handler(request_rec *r)
          * connection. */
         return DECLINED;
     }
-    
+
     upgrade = apr_table_get(r->headers_in, "Upgrade");
     if (upgrade && *upgrade) {
         const char *conn = apr_table_get(r->headers_in, "Connection");
         if (ap_find_token(r->pool, conn, "upgrade")) {
             apr_array_header_t *offers = NULL;
             const char *err;
-            
+
             err = ap_parse_token_list_strict(r->pool, upgrade, &offers, 0);
             if (err) {
                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02910)
                               "parsing Upgrade header: %s", err);
                 return DECLINED;
             }
-            
+
             if (offers && offers->nelts > 0) {
                 const char *protocol = ap_select_protocol(c, r, NULL, offers);
                 if (protocol && strcmp(protocol, ap_get_protocol(c))) {
@@ -5612,7 +5639,7 @@ static int core_upgrade_handler(request_rec *r)
                     apr_table_clear(r->headers_out);
                     apr_table_setn(r->headers_out, "Upgrade", protocol);
                     apr_table_setn(r->headers_out, "Connection", "Upgrade");
-                    
+
                     r->status = HTTP_SWITCHING_PROTOCOLS;
                     r->status_line = ap_get_status_line(r->status);
                     ap_send_interim_response(r, 1);
@@ -5639,7 +5666,7 @@ static int core_upgrade_handler(request_rec *r)
             apr_table_setn(r->headers_out, "Connection", "Upgrade");
         }
     }
-    
+
     return DECLINED;
 }
 
