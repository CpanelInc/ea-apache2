From 4289ad594e82a64a5474c9339d05a443a5c91d9a Mon Sep 17 00:00:00 2001
From: Cory McIntire <cory@cpanel.net>
Date: Thu, 12 Jul 2018 15:21:51 -0500
Subject: [PATCH 05/20] Add SELinux support

---
 configure.in  | 42 ++++++++++++++-----------
 server/core.c | 85 +++++++++++++++++++++++++++++++++------------------
 2 files changed, 80 insertions(+), 47 deletions(-)

diff --git a/configure.in b/configure.in
index 56d3edf..75ef583 100644
--- a/configure.in
+++ b/configure.in
@@ -37,7 +37,7 @@ ifdef([AC_DISABLE_OPTION_CHECKING], [AC_DISABLE_OPTION_CHECKING])
 
 dnl XXX we can't just use AC_PREFIX_DEFAULT because that isn't subbed in
 dnl by configure until it is too late.  Is that how it should be or not?
-dnl Something seems broken here.                                               
+dnl Something seems broken here.
 AC_PREFIX_DEFAULT(/usr/local/apache2)
 
 dnl Get the layout here, so we can pass the required variables to apr
@@ -92,11 +92,11 @@ if test "x$with_included_apr" = "xyes"; then
   if test ! -d srclib/apr && test ! -d $srcdir/srclib/apr; then
     AC_MSG_ERROR([Bundled APR requested but not found at ./srclib/. Download and unpack the corresponding apr and apr-util packages to ./srclib/.])
   fi
-else 
+else
   APR_FIND_APR("$srcdir/srclib/apr", "./srclib/apr", 1, 1 2, [
     version=`$apr_config --version`
     case x${version} in
-    x1.[[0-3]].*) 
+    x1.[[0-3]].*)
       AC_MSG_WARN([APR version 1.4.0 or later is required, found $version])
       apr_acceptable=no
       ;;
@@ -152,11 +152,11 @@ elif test "x$with_included_apr" = "xyes"; then
   if test ! -d srclib/apr-util && test ! -d $srcdir/srclib/apr-util; then
     AC_MSG_ERROR([Bundled APR-Util requested but not found at ./srclib/. Download and unpack the corresponding apr and apr-util packages to ./srclib/.])
   fi
-else 
+else
    dnl If httpd is buildconf'ed against an apr 2.x tree, then 1.x
-   dnl isn't supported. 
+   dnl isn't supported.
    ifdef([APR_FIND_APU], [
-     APR_FIND_APU("$srcdir/srclib/apr-util", "./srclib/apr-util", 
+     APR_FIND_APU("$srcdir/srclib/apr-util", "./srclib/apr-util",
                   1, ${apr_major_version})
    ], [apu_found=no])
 fi
@@ -173,7 +173,7 @@ reconfig.yes)
 yes.reconfig)
   AC_MSG_ERROR([Cannot use an external APR with the bundled APR-util])
   ;;
-esac  
+esac
 
 if test "$apu_found" = "reconfig"; then
   APR_SUBDIR_CONFIG(srclib/apr-util,
@@ -230,7 +230,7 @@ if test "x$PCRE_CONFIG" != "x"; then
   fi
   case `$PCRE_CONFIG --version` in
   [1[0-9].*])
-    AC_DEFINE(HAVE_PCRE2, 1, [Detected PCRE2]) 
+    AC_DEFINE(HAVE_PCRE2, 1, [Detected PCRE2])
     ;;
   [[1-5].*])
     AC_MSG_ERROR([Need at least pcre version 6.0])
@@ -248,7 +248,7 @@ AC_MSG_NOTICE([])
 AC_MSG_NOTICE([Configuring Apache httpd...])
 AC_MSG_NOTICE([])
 
-dnl If the source dir is not equal to the build dir, 
+dnl If the source dir is not equal to the build dir,
 dnl then we are running in VPATH mode.
 
 APR_ADDTO(INCLUDES, [-I.])
@@ -418,7 +418,7 @@ AC_MINIX
 
 AC_ISC_POSIX
 
-# Ensure that satisfactory versions of apr and apr-util are 
+# Ensure that satisfactory versions of apr and apr-util are
 # found if external copies are configured.
 if test "${apr_found}" = "yes"; then
   # Require at least APR 1.3.x otherwise fail
@@ -530,6 +530,12 @@ gettid
 dnl confirm that a void pointer is large enough to store a long integer
 APACHE_CHECK_VOID_PTR_LEN
 
+AC_CHECK_LIB(selinux, is_selinux_enabled, [
+   AC_DEFINE(HAVE_SELINUX, 1, [Defined if SELinux is supported])
+   APR_ADDTO(AP_LIBS, [-lselinux])
+])
+
+
 if test $ac_cv_func_gettid = no; then
   # On Linux before glibc 2.30, gettid() is only usable via syscall()
   AC_CACHE_CHECK([for gettid() via syscall], ap_cv_gettid,
@@ -578,7 +584,7 @@ case $host in
     *)
         OS_SPECIFIC_VARS=""
 esac
-      
+
 AC_ARG_WITH(port,APACHE_HELP_STRING(--with-port=PORT,Port on which to listen (default is 80)),
         [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-port requires a value (the TCP port number)'); else PORT="$withval"; fi],
 	[PORT=80])
@@ -813,7 +819,7 @@ APACHE_HELP_STRING(--with-suexec-syslog,Use syslog for suexec logging),[
     AC_CHECK_FUNCS([vsyslog], [], [
        AC_MSG_ERROR([cannot support syslog from suexec without vsyslog()])])
     AC_DEFINE(AP_LOG_SYSLOG, 1, [SuExec log to syslog])
-  fi    
+  fi
 ])
 
 
@@ -826,10 +832,10 @@ APACHE_HELP_STRING(--with-suexec-umask,umask for suexec'd process),[
   AC_DEFINE_UNQUOTED(AP_SUEXEC_UMASK, 0$withval, [umask for suexec'd process] ) ] )
 
 INSTALL_SUEXEC=setuid
-AC_ARG_ENABLE([suexec-capabilities], 
+AC_ARG_ENABLE([suexec-capabilities],
 APACHE_HELP_STRING(--enable-suexec-capabilities,Use Linux capability bits not setuid root suexec), [
 INSTALL_SUEXEC=caps
-AC_DEFINE(AP_SUEXEC_CAPABILITIES, 1, 
+AC_DEFINE(AP_SUEXEC_CAPABILITIES, 1,
           [Enable if suexec is installed with Linux capabilities, not setuid])
 ])
 APACHE_SUBST(INSTALL_SUEXEC)
@@ -847,19 +853,19 @@ AC_DEFINE(AP_USING_AUTOCONF, 1,
 		[Using autoconf to configure Apache])
 
 if test "$SINGLE_LISTEN_UNSERIALIZED_ACCEPT" = "1"; then
-    AC_DEFINE(SINGLE_LISTEN_UNSERIALIZED_ACCEPT, 1, 
+    AC_DEFINE(SINGLE_LISTEN_UNSERIALIZED_ACCEPT, 1,
               [This platform doesn't suffer from the thundering herd problem])
 fi
 
 if test "$AP_NONBLOCK_WHEN_MULTI_LISTEN" = "1"; then
-    AC_DEFINE(AP_NONBLOCK_WHEN_MULTI_LISTEN, 1, 
+    AC_DEFINE(AP_NONBLOCK_WHEN_MULTI_LISTEN, 1,
               [Listening sockets are non-blocking when there are more than 1])
 fi
 
 APR_CHECK_APR_DEFINE(APR_HAVE_IPV6)
 
 AC_ARG_ENABLE(v4-mapped,APACHE_HELP_STRING(--enable-v4-mapped,Allow IPv6 sockets to handle IPv4 connections),
-[ 
+[
   v4mapped=$enableval
 ],
 [
@@ -885,7 +891,7 @@ if test $v4mapped = "yes" -a $ac_cv_define_APR_HAVE_IPV6 = "yes"; then
               [Allow IPv4 connections on IPv6 listening sockets])
 fi
 
-APACHE_FAST_OUTPUT(Makefile modules/Makefile srclib/Makefile) 
+APACHE_FAST_OUTPUT(Makefile modules/Makefile srclib/Makefile)
 APACHE_FAST_OUTPUT(os/Makefile server/Makefile)
 APACHE_FAST_OUTPUT(support/Makefile)
 
diff --git a/server/core.c b/server/core.c
index 30b317e..700bf1c 100644
--- a/server/core.c
+++ b/server/core.c
@@ -65,6 +65,11 @@
 #include <unistd.h>
 #endif
 
+#ifdef HAVE_SELINUX
+#include <selinux/selinux.h>
+#endif
+
+
 /* LimitRequestBody handling */
 #define AP_LIMIT_REQ_BODY_UNSET         ((apr_off_t) -1)
 #define AP_DEFAULT_LIMIT_REQ_BODY       ((apr_off_t) 1<<30) /* 1GB */
@@ -213,7 +218,7 @@ static void *create_core_dir_config(apr_pool_t *a, char *dir)
     conf->max_reversals = AP_MAXRANGES_UNSET;
 
     conf->cgi_pass_auth = AP_CGI_PASS_AUTH_UNSET;
-    conf->qualify_redirect_url = AP_CORE_CONFIG_UNSET; 
+    conf->qualify_redirect_url = AP_CORE_CONFIG_UNSET;
 
     return (void *)conf;
 }
@@ -411,7 +416,7 @@ static void *merge_core_dir_configs(apr_pool_t *a, void *basev, void *newv)
     if (new->enable_sendfile != ENABLE_SENDFILE_UNSET) {
         conf->enable_sendfile = new->enable_sendfile;
     }
- 
+
     if (new->read_buf_size) {
         conf->read_buf_size = new->read_buf_size;
     }
@@ -522,9 +527,9 @@ static void *create_core_server_config(apr_pool_t *a, server_rec *s)
 
     conf->protocols = apr_array_make(a, 5, sizeof(const char *));
     conf->protocols_honor_order = -1;
-    conf->merge_slashes = AP_CORE_CONFIG_UNSET; 
-    
-    conf->strict_host_check= AP_CORE_CONFIG_UNSET; 
+    conf->merge_slashes = AP_CORE_CONFIG_UNSET;
+
+    conf->strict_host_check= AP_CORE_CONFIG_UNSET;
 
     return (void *)conf;
 }
@@ -585,13 +590,13 @@ static void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)
                            ? virt->merge_trailers
                            : base->merge_trailers;
 
-    conf->protocols = ((virt->protocols->nelts > 0)? 
+    conf->protocols = ((virt->protocols->nelts > 0)?
                        virt->protocols : base->protocols);
     conf->protocols_honor_order = ((virt->protocols_honor_order < 0)?
                                        base->protocols_honor_order :
                                        virt->protocols_honor_order);
     AP_CORE_MERGE_FLAG(merge_slashes, conf, base, virt);
-    
+
 
     conf->flush_max_threshold = (virt->flush_max_threshold)
                                   ? virt->flush_max_threshold
@@ -601,7 +606,7 @@ static void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)
                                   : base->flush_max_pipelined;
 
     conf->strict_host_check = (virt->strict_host_check != AP_CORE_CONFIG_UNSET)
-                              ? virt->strict_host_check 
+                              ? virt->strict_host_check
                               : base->strict_host_check;
 
     AP_CORE_MERGE_FLAG(strict_host_check, conf, base, virt);
@@ -1637,7 +1642,7 @@ static const char *set_document_root(cmd_parms *cmd, void *dummy,
             conf->ap_document_root = arg;
         }
         else {
-            return apr_psprintf(cmd->pool, 
+            return apr_psprintf(cmd->pool,
                                 "DocumentRoot '%s' is not a directory, or is not readable",
                                 arg);
         }
@@ -4082,7 +4087,7 @@ static const char *set_protocols(cmd_parms *cmd, void *dummy,
     if (err) {
         return err;
     }
-    
+
     np = (const char **)apr_array_push(conf->protocols);
     *np = arg;
 
@@ -4095,11 +4100,11 @@ static const char *set_protocols_honor_order(cmd_parms *cmd, void *dummy,
     core_server_config *conf =
     ap_get_core_module_config(cmd->server->module_config);
     const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);
-    
+
     if (err) {
         return err;
     }
-    
+
     if (ap_cstr_casecmp(arg, "on") == 0) {
         conf->protocols_honor_order = 1;
     }
@@ -4109,7 +4114,7 @@ static const char *set_protocols_honor_order(cmd_parms *cmd, void *dummy,
     else {
         return "ProtocolsHonorOrder must be 'on' or 'off'";
     }
-    
+
     return NULL;
 }
 
@@ -4653,8 +4658,8 @@ AP_INIT_TAKE2("CGIVar", set_cgi_var, NULL, OR_FILEINFO,
 AP_INIT_FLAG("QualifyRedirectURL", set_qualify_redirect_url, NULL, OR_FILEINFO,
              "Controls whether the REDIRECT_URL environment variable is fully "
              "qualified"),
-AP_INIT_FLAG("StrictHostCheck", set_core_server_flag, 
-             (void *)APR_OFFSETOF(core_server_config, strict_host_check),  
+AP_INIT_FLAG("StrictHostCheck", set_core_server_flag,
+             (void *)APR_OFFSETOF(core_server_config, strict_host_check),
              RSRC_CONF,
              "Controls whether a hostname match is required"),
 AP_INIT_TAKE1("ForceType", ap_set_string_slot_lower,
@@ -4718,8 +4723,8 @@ AP_INIT_ITERATE("HttpProtocolOptions", set_http_protocol_options, NULL, RSRC_CON
                 "'Unsafe' or 'Strict' (default). Sets HTTP acceptance rules"),
 AP_INIT_ITERATE("RegisterHttpMethod", set_http_method, NULL, RSRC_CONF,
                 "Registers non-standard HTTP methods"),
-AP_INIT_FLAG("MergeSlashes", set_core_server_flag, 
-             (void *)APR_OFFSETOF(core_server_config, merge_slashes),  
+AP_INIT_FLAG("MergeSlashes", set_core_server_flag,
+             (void *)APR_OFFSETOF(core_server_config, merge_slashes),
              RSRC_CONF,
              "Controls whether consecutive slashes in the URI path are merged"),
 { NULL }
@@ -4814,7 +4819,7 @@ static int core_override_type(request_rec *r)
     if (conf->mime_type && strcmp(conf->mime_type, "none"))
         ap_set_content_type(r, (char*) conf->mime_type);
 
-    if (conf->expr_handler) { 
+    if (conf->expr_handler) {
         const char *err;
         const char *val;
         val = ap_expr_str_exec(r, conf->expr_handler, &err);
@@ -4824,18 +4829,18 @@ static int core_override_type(request_rec *r)
             return HTTP_INTERNAL_SERVER_ERROR;
         }
 
-        if (val != ap_strstr_c(val, "proxy:unix")) { 
+        if (val != ap_strstr_c(val, "proxy:unix")) {
             /* Retained for compatibility --  but not for UDS */
             char *tmp = apr_pstrdup(r->pool, val);
             ap_str_tolower(tmp);
             val = tmp;
         }
 
-        if (strcmp(val, "none")) { 
+        if (strcmp(val, "none")) {
             r->handler = val;
         }
     }
-    else if (conf->handler && strcmp(conf->handler, "none")) { 
+    else if (conf->handler && strcmp(conf->handler, "none")) {
         r->handler = conf->handler;
     }
 
@@ -5139,7 +5144,29 @@ static int core_post_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *pte
     }
 #endif
 
-    return OK;
+#ifdef HAVE_SELINUX
+    {
+        static int already_warned = 0;
+        int is_enabled = is_selinux_enabled() > 0;
+
+        if (is_enabled && !already_warned) {
+            security_context_t con;
+
+            if (getcon(&con) == 0) {
+
+                ap_log_error(APLOG_MARK, APLOG_NOTICE, 0, NULL,
+                             "SELinux policy enabled; "
+                             "httpd running as context %s", con);
+
+                already_warned = 1;
+
+                freecon(con);
+            }
+        }
+    }
+#endif
+
+	return OK;
 }
 
 static void core_insert_filter(request_rec *r)
@@ -5304,7 +5331,7 @@ static int core_pre_connection(conn_rec *c, void *csd)
     if (c->master) {
         return DONE;
     }
-    
+
     net = apr_palloc(c->pool, sizeof(*net));
     /* The Nagle algorithm says that we should delay sending partial
      * packets in hopes of getting more data.  We don't want to do
@@ -5509,7 +5536,7 @@ static apr_status_t core_insert_network_bucket(conn_rec *c,
 }
 
 static apr_status_t core_dirwalk_stat(apr_finfo_t *finfo, request_rec *r,
-                                      apr_int32_t wanted) 
+                                      apr_int32_t wanted)
 {
     return apr_stat(finfo, r->filename, wanted, r->pool);
 }
@@ -5565,21 +5592,21 @@ static int core_upgrade_handler(request_rec *r)
          * connection. */
         return DECLINED;
     }
-    
+
     upgrade = apr_table_get(r->headers_in, "Upgrade");
     if (upgrade && *upgrade) {
         const char *conn = apr_table_get(r->headers_in, "Connection");
         if (ap_find_token(r->pool, conn, "upgrade")) {
             apr_array_header_t *offers = NULL;
             const char *err;
-            
+
             err = ap_parse_token_list_strict(r->pool, upgrade, &offers, 0);
             if (err) {
                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02910)
                               "parsing Upgrade header: %s", err);
                 return DECLINED;
             }
-            
+
             if (offers && offers->nelts > 0) {
                 const char *protocol = ap_select_protocol(c, r, NULL, offers);
                 if (protocol && strcmp(protocol, ap_get_protocol(c))) {
@@ -5589,7 +5616,7 @@ static int core_upgrade_handler(request_rec *r)
                     apr_table_clear(r->headers_out);
                     apr_table_setn(r->headers_out, "Upgrade", protocol);
                     apr_table_setn(r->headers_out, "Connection", "Upgrade");
-                    
+
                     r->status = HTTP_SWITCHING_PROTOCOLS;
                     r->status_line = ap_get_status_line(r->status);
                     ap_send_interim_response(r, 1);
@@ -5616,7 +5643,7 @@ static int core_upgrade_handler(request_rec *r)
             apr_table_setn(r->headers_out, "Connection", "Upgrade");
         }
     }
-    
+
     return DECLINED;
 }
 
-- 
2.42.0

